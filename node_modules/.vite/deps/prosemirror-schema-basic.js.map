{
  "version": 3,
  "sources": ["../../prosemirror-schema-basic/dist/index.js"],
  "sourcesContent": ["import { Schema } from 'prosemirror-model';\n\nconst pDOM = [\"p\", 0], blockquoteDOM = [\"blockquote\", 0], hrDOM = [\"hr\"], preDOM = [\"pre\", [\"code\", 0]], brDOM = [\"br\"];\n/**\n[Specs](https://prosemirror.net/docs/ref/#model.NodeSpec) for the nodes defined in this schema.\n*/\nconst nodes = {\n    /**\n    NodeSpec The top level document node.\n    */\n    doc: {\n        content: \"block+\"\n    },\n    /**\n    A plain paragraph textblock. Represented in the DOM\n    as a `<p>` element.\n    */\n    paragraph: {\n        content: \"inline*\",\n        group: \"block\",\n        parseDOM: [{ tag: \"p\" }],\n        toDOM() { return pDOM; }\n    },\n    /**\n    A blockquote (`<blockquote>`) wrapping one or more blocks.\n    */\n    blockquote: {\n        content: \"block+\",\n        group: \"block\",\n        defining: true,\n        parseDOM: [{ tag: \"blockquote\" }],\n        toDOM() { return blockquoteDOM; }\n    },\n    /**\n    A horizontal rule (`<hr>`).\n    */\n    horizontal_rule: {\n        group: \"block\",\n        parseDOM: [{ tag: \"hr\" }],\n        toDOM() { return hrDOM; }\n    },\n    /**\n    A heading textblock, with a `level` attribute that\n    should hold the number 1 to 6. Parsed and serialized as `<h1>` to\n    `<h6>` elements.\n    */\n    heading: {\n        attrs: { level: { default: 1, validate: \"number\" } },\n        content: \"inline*\",\n        group: \"block\",\n        defining: true,\n        parseDOM: [{ tag: \"h1\", attrs: { level: 1 } },\n            { tag: \"h2\", attrs: { level: 2 } },\n            { tag: \"h3\", attrs: { level: 3 } },\n            { tag: \"h4\", attrs: { level: 4 } },\n            { tag: \"h5\", attrs: { level: 5 } },\n            { tag: \"h6\", attrs: { level: 6 } }],\n        toDOM(node) { return [\"h\" + node.attrs.level, 0]; }\n    },\n    /**\n    A code listing. Disallows marks or non-text inline\n    nodes by default. Represented as a `<pre>` element with a\n    `<code>` element inside of it.\n    */\n    code_block: {\n        content: \"text*\",\n        marks: \"\",\n        group: \"block\",\n        code: true,\n        defining: true,\n        parseDOM: [{ tag: \"pre\", preserveWhitespace: \"full\" }],\n        toDOM() { return preDOM; }\n    },\n    /**\n    The text node.\n    */\n    text: {\n        group: \"inline\"\n    },\n    /**\n    An inline image (`<img>`) node. Supports `src`,\n    `alt`, and `href` attributes. The latter two default to the empty\n    string.\n    */\n    image: {\n        inline: true,\n        attrs: {\n            src: { validate: \"string\" },\n            alt: { default: null, validate: \"string|null\" },\n            title: { default: null, validate: \"string|null\" }\n        },\n        group: \"inline\",\n        draggable: true,\n        parseDOM: [{ tag: \"img[src]\", getAttrs(dom) {\n                    return {\n                        src: dom.getAttribute(\"src\"),\n                        title: dom.getAttribute(\"title\"),\n                        alt: dom.getAttribute(\"alt\")\n                    };\n                } }],\n        toDOM(node) { let { src, alt, title } = node.attrs; return [\"img\", { src, alt, title }]; }\n    },\n    /**\n    A hard line break, represented in the DOM as `<br>`.\n    */\n    hard_break: {\n        inline: true,\n        group: \"inline\",\n        selectable: false,\n        parseDOM: [{ tag: \"br\" }],\n        toDOM() { return brDOM; }\n    }\n};\nconst emDOM = [\"em\", 0], strongDOM = [\"strong\", 0], codeDOM = [\"code\", 0];\n/**\n[Specs](https://prosemirror.net/docs/ref/#model.MarkSpec) for the marks in the schema.\n*/\nconst marks = {\n    /**\n    A link. Has `href` and `title` attributes. `title`\n    defaults to the empty string. Rendered and parsed as an `<a>`\n    element.\n    */\n    link: {\n        attrs: {\n            href: { validate: \"string\" },\n            title: { default: null, validate: \"string|null\" }\n        },\n        inclusive: false,\n        parseDOM: [{ tag: \"a[href]\", getAttrs(dom) {\n                    return { href: dom.getAttribute(\"href\"), title: dom.getAttribute(\"title\") };\n                } }],\n        toDOM(node) { let { href, title } = node.attrs; return [\"a\", { href, title }, 0]; }\n    },\n    /**\n    An emphasis mark. Rendered as an `<em>` element. Has parse rules\n    that also match `<i>` and `font-style: italic`.\n    */\n    em: {\n        parseDOM: [\n            { tag: \"i\" }, { tag: \"em\" },\n            { style: \"font-style=italic\" },\n            { style: \"font-style=normal\", clearMark: m => m.type.name == \"em\" }\n        ],\n        toDOM() { return emDOM; }\n    },\n    /**\n    A strong mark. Rendered as `<strong>`, parse rules also match\n    `<b>` and `font-weight: bold`.\n    */\n    strong: {\n        parseDOM: [\n            { tag: \"strong\" },\n            // This works around a Google Docs misbehavior where\n            // pasted content will be inexplicably wrapped in `<b>`\n            // tags with a font-weight normal.\n            { tag: \"b\", getAttrs: (node) => node.style.fontWeight != \"normal\" && null },\n            { style: \"font-weight=400\", clearMark: m => m.type.name == \"strong\" },\n            { style: \"font-weight\", getAttrs: (value) => /^(bold(er)?|[5-9]\\d{2,})$/.test(value) && null },\n        ],\n        toDOM() { return strongDOM; }\n    },\n    /**\n    Code font mark. Represented as a `<code>` element.\n    */\n    code: {\n        parseDOM: [{ tag: \"code\" }],\n        toDOM() { return codeDOM; }\n    }\n};\n/**\nThis schema roughly corresponds to the document schema used by\n[CommonMark](http://commonmark.org/), minus the list elements,\nwhich are defined in the [`prosemirror-schema-list`](https://prosemirror.net/docs/ref/#schema-list)\nmodule.\n\nTo reuse elements from this schema, extend or read from its\n`spec.nodes` and `spec.marks` [properties](https://prosemirror.net/docs/ref/#model.Schema.spec).\n*/\nconst schema = new Schema({ nodes, marks });\n\nexport { marks, nodes, schema };\n"],
  "mappings": "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",
  "names": []
}
